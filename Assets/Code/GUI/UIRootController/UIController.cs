using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum UILevel
{
    PanelLevel = 1 << 0,
    TipLevel = 1 << 1,
    TopLevel = 1 << 2,
}

public class UIController : AutoGeneratedMonoSingleton<UIController>
{
    private class UIItem
    {
        public string name;
        public GameObject obj;
    }

    [SerializeField]
    private Transform m_panelParent;
    [SerializeField]
    private Transform m_tipParent;
    [SerializeField]
    private Transform m_topParent;


    private Stack<UIItem> m_panelStacks = new Stack<UIItem>();
    private Stack<UIItem> m_tipStacks = new Stack<UIItem>();
    private Stack<UIItem> m_topStacks = new Stack<UIItem>();



    private void Awake()
    {
        m_panelStacks.Clear();
        m_tipStacks.Clear();
        m_topStacks.Clear();
    }

    public T Open<T>(string name, UILevel level) where T : Object
    {
        UIItem item = null;
        switch (level)
        {
            case UILevel.PanelLevel:
                if (m_panelStacks.Count > 0) item = m_panelStacks.Peek();
                break;
            case UILevel.TipLevel:
                if (m_tipStacks.Count > 0) item = m_tipStacks.Peek();
                break;
            case UILevel.TopLevel:
                if (m_topStacks.Count > 0) item = m_topStacks.Peek();
                break;
        }
        if (item != null && item.name.Substring(0, name.Length) == name) return default;

        GameObject obj = ResourcesManager.LoadPanel<GameObject>(name);
        if (obj == null)
        {
            Debug.LogError($"Panel Controller Open {name} not exist!");
            return default;
        }
        return Open<T>(obj, level);
    }

    public T Open<T>(GameObject obj, UILevel level)
    {
        T component = obj.GetComponent<T>();
        if (component == null)
        {
            Debug.LogError($"Panel Controller Open {typeof(T).Name} not exist!");
            return component;
        }
        GameObject ins = null;
        switch (level)
        {
            case UILevel.PanelLevel:
                ins = Instantiate(obj, m_panelParent);
                m_panelStacks.Push(new UIItem() { name = ins.name, obj = ins });
                break;
            case UILevel.TipLevel:
                ins = Instantiate(obj, m_tipParent);
                m_tipStacks.Push(new UIItem() { name = ins.name, obj = ins });
                break;
            case UILevel.TopLevel:
                ins = Instantiate(obj, m_topParent);
                m_topStacks.Push(new UIItem() { name = ins.name, obj = ins });
                break;
        }
        return ins == null ? default : ins.GetComponent<T>();
    }

    public void Close(UILevel level)
    {
        UIItem item = null;
        switch (level)
        {
            case UILevel.PanelLevel:
                item = m_panelStacks.Pop();
                break;
            case UILevel.TipLevel:
                item = m_tipStacks.Pop();
                break;
            case UILevel.TopLevel:
                item = m_topStacks.Pop();
                break;
        }
        if (item != null)
            Destroy(item.obj);
    }

    public void Close()
    {
        UIItem item = null;
        if (m_topStacks.Count > 0)
            item = m_topStacks.Pop();
        else if (m_tipStacks.Count > 0)
            item = m_tipStacks.Pop();
        else if (m_panelStacks.Count > 0)
            item = m_panelStacks.Pop();
        if (item != null)
            Destroy(item.obj);
    }

    private void OnDestroy()
    {
        m_panelStacks.Clear();
        m_tipStacks.Clear();
        m_topStacks.Clear();
    }
}
